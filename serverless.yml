org: irresarac
service: notes-api

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1
  environment:
    JWT_SECRET: ${ssm:/notes-app/jwt-secret}
    USERS_TABLE: UsersTable
    NOTES_TABLE: NotesTable
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/UsersTable"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/NotesTable"

resources:
  Parameters:
    CreateNotesTable:
      Type: String
      Default: true
      AllowedValues:
        - "true"
        - "false"
      Description: "Set to 'false' if NotesTable already exists"

  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain # Zadržava tabelu nakon brisanja stack-a

    NotesTable:
      Type: AWS::DynamoDB::Table
      Condition: CreateNotesTableCondition
      Properties:
        TableName: NotesTable
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain # Zadržava tabelu nakon brisanja stack-a

  Conditions:
    CreateNotesTableCondition:
      Fn::Equals: [!Ref CreateNotesTable, "true"]

functions:
  getNotes:
    handler: functions/notes/getNotes.handler
    events:
      - httpApi:
          path: /api/notes
          method: get

  createNote:
    handler: functions/notes/createNote.handler
    events:
      - httpApi:
          path: /api/notes
          method: post

  updateNote:
    handler: functions/notes/updateNote.handler
    events:
      - httpApi:
          path: /api/notes
          method: put

  deleteNote:
    handler: functions/notes/deleteNote.handler
    events:
      - httpApi:
          path: /api/notes
          method: delete

  signup:
    handler: functions/users/signup.handler
    events:
      - httpApi:
          path: /api/user/signup
          method: post

  login:
    handler: functions/users/login.handler
    events:
      - httpApi:
          path: /api/user/login
          method: post

# Custom sekcija za dodatna podešavanja
custom:
  stage: ${opt:stage, 'dev'}

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
